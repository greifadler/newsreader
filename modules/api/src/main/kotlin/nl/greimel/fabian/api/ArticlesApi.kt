/**
 * Newsreader Backend API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package nl.greimel.fabian.api

import java.io.IOException

import nl.greimel.fabian.model.UserRegister
import nl.greimel.fabian.model.UserLogin
import nl.greimel.fabian.model.Category
import nl.greimel.fabian.model.Articles
import nl.greimel.fabian.model.RegisterResponse
import nl.greimel.fabian.model.LoginResponse

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success

class ArticlesApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api")
        }
    }

    var apiKey = ""

    /**
    * Get a list of articles
    * Returns a list of articles, starting with the newest article in the database that fits the specified arguments. Also returns the Id of the next article, which can be used for incremental loading.
    * @param count The (max) number of results to return (optional)
    * @param feed Use this to get only articles from the specified feed Id. (optional)
    * @param feeds Comma-separated list of feed ids; use to filter articles. (optional)
    * @param category Use this to get only articles with specified category Id. (optional)
    * @return InlineResponse2001
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun articlesGet(count: kotlin.Int?, feed: kotlin.Int?, feeds: kotlin.String?, category: kotlin.Int?) : Articles {
        val localVarResponse = articlesGetWithHttpInfo(count = count, feed = feed, feeds = feeds, category = category)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Articles
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a list of articles
    * Returns a list of articles, starting with the newest article in the database that fits the specified arguments. Also returns the Id of the next article, which can be used for incremental loading.
    * @param count The (max) number of results to return (optional)
    * @param feed Use this to get only articles from the specified feed Id. (optional)
    * @param feeds Comma-separated list of feed ids; use to filter articles. (optional)
    * @param category Use this to get only articles with specified category Id. (optional)
    * @return ApiResponse<InlineResponse2001?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun articlesGetWithHttpInfo(count: kotlin.Int?, feed: kotlin.Int?, feeds: kotlin.String?, category: kotlin.Int?) : ApiResponse<Articles?> {
        val localVariableConfig = articlesGetRequestConfig(count = count, feed = feed, feeds = feeds, category = category)

        return request<Unit, Articles>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation articlesGet
    *
    * @param count The (max) number of results to return (optional)
    * @param feed Use this to get only articles from the specified feed Id. (optional)
    * @param feeds Comma-separated list of feed ids; use to filter articles. (optional)
    * @param category Use this to get only articles with specified category Id. (optional)
    * @return RequestConfig
    */
    fun articlesGetRequestConfig(count: kotlin.Int?, feed: kotlin.Int?, feeds: kotlin.String?, category: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (feed != null) {
                    put("feed", listOf(feed.toString()))
                }
                if (feeds != null) {
                    put("feeds", listOf(feeds.toString()))
                }
                if (category != null) {
                    put("category", listOf(category.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        if(apiKey != "") {
            localVariableHeaders.put("x-authtoken", apiKey)
        }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/Articles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a list of articles starting from a specific article Id
    * Returns a list of articles, starting with the article with the specified Id. Also returns the Id of the next article, which can be used for incremental loading.
    * @param id The article Id to start from 
    * @param count The (max) number of results to return (optional)
    * @param feed Use this to get only articles from the specified feed Id. (optional)
    * @param feeds Comma-separated list of feed ids; use to filter articles. (optional)
    * @param category Use this to get only articles with specified category Id. (optional)
    * @return InlineResponse2001
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun articlesIdGet(id: kotlin.Int, count: kotlin.Int?, feed: kotlin.Int?, feeds: kotlin.String?, category: kotlin.Int?) : Articles {
        val localVarResponse = articlesIdGetWithHttpInfo(id = id, count = count, feed = feed, feeds = feeds, category = category)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Articles
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a list of articles starting from a specific article Id
    * Returns a list of articles, starting with the article with the specified Id. Also returns the Id of the next article, which can be used for incremental loading.
    * @param id The article Id to start from 
    * @param count The (max) number of results to return (optional)
    * @param feed Use this to get only articles from the specified feed Id. (optional)
    * @param feeds Comma-separated list of feed ids; use to filter articles. (optional)
    * @param category Use this to get only articles with specified category Id. (optional)
    * @return ApiResponse<InlineResponse2001?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun articlesIdGetWithHttpInfo(id: kotlin.Int, count: kotlin.Int?, feed: kotlin.Int?, feeds: kotlin.String?, category: kotlin.Int?) : ApiResponse<Articles?> {
        val localVariableConfig = articlesIdGetRequestConfig(id = id, count = count, feed = feed, feeds = feeds, category = category)

        return request<Unit, Articles>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation articlesIdGet
    *
    * @param id The article Id to start from 
    * @param count The (max) number of results to return (optional)
    * @param feed Use this to get only articles from the specified feed Id. (optional)
    * @param feeds Comma-separated list of feed ids; use to filter articles. (optional)
    * @param category Use this to get only articles with specified category Id. (optional)
    * @return RequestConfig
    */
    fun articlesIdGetRequestConfig(id: kotlin.Int, count: kotlin.Int?, feed: kotlin.Int?, feeds: kotlin.String?, category: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (feed != null) {
                    put("feed", listOf(feed.toString()))
                }
                if (feeds != null) {
                    put("feeds", listOf(feeds.toString()))
                }
                if (category != null) {
                    put("category", listOf(category.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        if(apiKey != "") {
            localVariableHeaders.put("x-authtoken", apiKey)
        }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/Articles/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Remove like from an article
    * Marks the specified article as no longer liked by the logged-in user.
    * @param id ID of the article from which the like is to be removed. 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun articlesIdLikeDelete(id: kotlin.Int) : Unit {
        val localVarResponse = articlesIdLikeDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Remove like from an article
    * Marks the specified article as no longer liked by the logged-in user.
    * @param id ID of the article from which the like is to be removed. 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun articlesIdLikeDeleteWithHttpInfo(id: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = articlesIdLikeDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation articlesIdLikeDelete
    *
    * @param id ID of the article from which the like is to be removed. 
    * @return RequestConfig
    */
    fun articlesIdLikeDeleteRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        if(apiKey != "") {
            localVariableHeaders.put("x-authtoken", apiKey)
        }

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/Articles/{id}/like".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Like an article
    * Marks the specified article as liked by the logged-in user.
    * @param id ID of the article to be liked. 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun articlesIdLikePut(id: kotlin.Int) : Unit {
        val localVarResponse = articlesIdLikePutWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Like an article
    * Marks the specified article as liked by the logged-in user.
    * @param id ID of the article to be liked. 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun articlesIdLikePutWithHttpInfo(id: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = articlesIdLikePutRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation articlesIdLikePut
    *
    * @param id ID of the article to be liked. 
    * @return RequestConfig
    */
    fun articlesIdLikePutRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        if(apiKey != "") {
            localVariableHeaders.put("x-authtoken", apiKey)
        }

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/Articles/{id}/like".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a list of articles liked by the logged-in user
    * Returns a list of articles that the logged-in user has liked.
    * @return InlineResponse2001
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun articlesLikedGet() : Articles {
        val localVarResponse = articlesLikedGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Articles
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a list of articles liked by the logged-in user
    * Returns a list of articles that the logged-in user has liked.
    * @return ApiResponse<InlineResponse2001?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun articlesLikedGetWithHttpInfo() : ApiResponse<Articles?> {
        val localVariableConfig = articlesLikedGetRequestConfig()

        return request<Unit, Articles>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation articlesLikedGet
    *
    * @return RequestConfig
    */
    fun articlesLikedGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        if(apiKey != "") {
            localVariableHeaders.put("x-authtoken", apiKey)
        }
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/Articles/liked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a list of all news feeds
    * Returns a list of all news feeds. Every news article comes from exactly one feed.
    * @return kotlin.collections.List<InlineResponse200>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun feedsGet() : kotlin.collections.List<Category> {
        val localVarResponse = feedsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Category>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a list of all news feeds
    * Returns a list of all news feeds. Every news article comes from exactly one feed.
    * @return ApiResponse<kotlin.collections.List<InlineResponse200>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun feedsGetWithHttpInfo() : ApiResponse<kotlin.collections.List<Category>?> {
        val localVariableConfig = feedsGetRequestConfig()

        return request<Unit, kotlin.collections.List<Category>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation feedsGet
    *
    * @return RequestConfig
    */
    fun feedsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        if(apiKey != "") {
            localVariableHeaders.put("x-authtoken", apiKey)
        }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/Feeds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Log in as a user
    * Logs a user in and returns an auth token, if the specified username and password are correct.
    * @param body  
    * @return InlineResponse2003
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersLoginPost(body: UserLogin) : LoginResponse {
        val localVarResponse = usersLoginPostWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LoginResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Log in as a user
    * Logs a user in and returns an auth token, if the specified username and password are correct.
    * @param body  
    * @return ApiResponse<InlineResponse2003?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersLoginPostWithHttpInfo(body: UserLogin) : ApiResponse<LoginResponse?> {
        val localVariableConfig = usersLoginPostRequestConfig(body = body)

        return request<UserLogin, LoginResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersLoginPost
    *
    * @param body  
    * @return RequestConfig
    */
    fun usersLoginPostRequestConfig(body: UserLogin) : RequestConfig<UserLogin> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/Users/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Register a new user
    * Creates a new user account, if the UserName is not already in use.
    * @param body  
    * @return InlineResponse2002
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersRegisterPost(body: UserRegister) : RegisterResponse {
        val localVarResponse = usersRegisterPostWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RegisterResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Register a new user
    * Creates a new user account, if the UserName is not already in use.
    * @param body  
    * @return ApiResponse<InlineResponse2002?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersRegisterPostWithHttpInfo(body: UserRegister) : ApiResponse<RegisterResponse?> {
        val localVariableConfig = usersRegisterPostRequestConfig(body = body)

        return request<UserRegister, RegisterResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersRegisterPost
    *
    * @param body  
    * @return RequestConfig
    */
    fun usersRegisterPostRequestConfig(body: UserRegister) : RequestConfig<UserRegister> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/Users/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
